##  helm3 template --set global.env=ops,global.service.postgres.customHost=postgres.test-meeraspace-postgres,image.extraEnv.POSTGRES_DATABASE=ops_ac ./ > out.yaml
##  helm3 template --set global.env=ops ./ > out.yaml

global:
  env: dev
  mode: 
    standard: true
    ## If set to "true"ï¼Œ  no namespace.prefix & host.prefix spec
  namespace:
    prefix: dev 
    mid: meeraspace
    suffix:
      infrastructure:
        gateway: gateway
        consul: consul
      meeraApp:
        envs: envs
  host:
    svcName:
      workspace: null
      envs: envs
    prefix: dev
    baseUrl: meeraspace.com
  service:
    gateway:
      name: meeraspace-gateway
      namespace: istio-system
    consul:
      svcName: consul  

# fullnameOverride: 

replicaCount: 1

configmapEnvVars:
  enabled: false

image:
  repository: registry.tespkg.in/library/envs
  tag: "alpine3.10"  
  pullPolicy: Always
  # pullPolicy: IfNotPresent
  ports:
  - name: envs
    containerPort: 9112
    protocol: TCP
  extraCommand:
  - /usr/local/envs/bin/envs
  - serve
  - --address=:9112
  - --schema=https  
  - --host=$(envsHost)
  - --dsn=http://$(consulHTTPAddr)/envs
  - --asset-dir=/usr/local/envs/static

  extraENVRulehandled:
    consulHTTPAddr: consul.$env-$nsMid-consul:8500
    envsHost: envs.$env.$baseUrl

  ## ExtraEnv has the highest priority when there are multiple repeating envs
  extraEnv:

service:
  type: ClusterIP
  ports:
  - port: 9112
    name: envs
    targetPort: 9112

istio:
  envoyfilter:
    enabled: false

  virtualservice:
    enabled: true
    http:
    - route:
      - destination:
          host: envs
          port:
            number: 9112

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

volumeMounts:
## If true,  Pod volumes to mount into the container's filesystem
  enabled: false

volumes:
## If true, will create/use a Volume, configmap nfs hostPath emptyDir
  enabled: false


persistentVolumeClaim1:
## If true,  will create/use a Persistent Volume Claim
  enabled: false

configmap:
  enabled: false