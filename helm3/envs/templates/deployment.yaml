apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "APP.name" . }}
  namespace: {{ template "APP.namespace" . }}
  labels:
    app: {{ template "APP.name" . }}
    chart: {{ template "APP.chart" . }}
    version: {{ template "APP.version" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "APP.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "APP.name" . }}
        release: {{ .Release.Name }}
        version: {{ template "APP.version" . }}
        namespace: {{ template "APP.namespace" . }}
        env: {{ .Values.global.env }}
        namespace: {{ template "APP.namespace" . }}
    spec:
      imagePullSecrets:
      - name: {{ template "APP.name" . }}-gitlabregistrykey
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.configmapEnvVars.enabled }}
          envFrom:
            - configMapRef:
                name: {{ template "APP.name" . }}-envvars
          {{- end }}
          env:
  {{- $baseUrl := .Values.global.host.baseUrl -}}
  {{- $env := .Values.global.env -}}
  {{- $nsPrefix := .Values.global.namespace.prefix -}}
  {{- $nsMid := .Values.global.namespace.mid -}}
  {{- $hostPrefix := .Values.global.host.prefix -}}
  {{- $standardStatus := .Values.global.mode.standard -}}
  {{- $app := default .Chart.Name .Values.nameOverride -}}
          {{- range $key, $value := .Values.image.extraENVRulehandled }}
          {{- if eq $standardStatus false }}
          - name: {{ $key }}
            value: {{ printf $value | replace "$env" $hostPrefix | replace "$baseUrl" $baseUrl }}
          {{- else }}
          - name: {{ $key }}
            value: {{ printf $value | replace "$env" $env | replace "$baseUrl" $baseUrl }}
          {{- end }}
          {{- end }}
          {{- range $key, $value := .Values.image.extraENVRulehandled2 }}
          {{- if eq $standardStatus false }}
          - name: {{ $key }}
            value: {{ printf $value | replace "$env" $nsPrefix | replace "$nsMid" $nsMid }}
          {{- else }}
          - name: {{ $key }}
            value: {{ printf $value | replace "$env" $env | replace "$nsMid" $nsMid }}
          {{- end }}
          {{- end }}
          {{- range $key, $value := .Values.image.extraEnvFromSecert }}
          - name: {{ $key }}
            valueFrom:
              secretKeyRef:
                name: {{ printf "%s" $app  }}-secret
                key: {{ $value | quote }}
          {{- end }}
          {{- range $key, $value := .Values.image.extraEnv }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          command: 
          {{- range $key, $value := .Values.image.extraCommand }}
          - {{ $value }}
          {{- end }}
          ports:
{{ toYaml .Values.image.ports | indent 10 }}
{{- if  .Values.volumeMounts.enabled }}
          volumeMounts:
{{ toYaml .Values.volumeMounts.volumeMounts | indent 12 }}  
{{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}  
          livenessProbe:
{{ toYaml .Values.livenessProbe | indent 12 }}
          readinessProbe:
{{ toYaml .Values.readinessProbe | indent 12 }}
{{- if and  .Values.volumes.enabled  .Values.volumeMounts.enabled }}
      volumes:
{{- if .Values.volumes.configmap.enabled }}
      - name: configmap
        configMap:
          name: {{ template "APP.fullname" . }}-config
{{- end }}
{{- if .Values.volumes.volumes }}
{{ toYaml .Values.volumes.volumes | indent 6 }}
{{- end }}   
{{- end }}   
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}