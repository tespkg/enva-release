
# Oidc registration example file
#
# 
# It is IMPORTANT to know the clients.name is the key prefix to store the key & value pairs in env store
# And the allowed name pattern is "[\-_a-zA-Z0-9]*".
# For example, If the following oidc client was registered via oidcr API:
# 
# clients:
# - name: ssoOAuth2
#   OAuth2Host: http://localhost:5555
#   redirectURIs:
#   - http://localhost:5555/callback
#   allowedAuthTypes:
#   - authorization_code
#   - implicit
#   - client_credentials
#   - password_credentials
#
# These key & value pairs will stored in env store:
# 1. ssoOAuth2ClientID=GeneratedClientID
# 2. ssoOAuth2ClientSecret=GeneratedSecret
# 3. ssoOAuth2RedirectURI=http://localhost:5555/callback
# 4. ssoOAuth2Host=http://localhost:5555
# 
# Configs for oidc issuer, ie, sso
provider-config:
  issuer: ${env:// .ssoIssuer }
  client-id: ${env:// .internalAppClientID }
  client-secret: ${env:// .internalAppClientSecret }
  username: ${env:// .internalAppUsername }
  password: ${env:// .internalAppPassword }
clients:
- name: ssoOAuth2
  redirectURIs:
  - http://localhost:5555/callback
  allowedAuthTypes:
  - authorization_code
  - implicit
  - client_credentials
  - password_credentials
- name: acOAuth2
  redirectURIs:
  - http://localhost:8080/oauth2
  allowedAuthTypes:
  - authorization_code
  - implicit
  - client_credentials
  - password_credentials
- name: configuratorOAuth2
  # OAuth2Host Added for front-end compatibility.
  # because the way of frontend doing oauth redirect is:
  # frontend expose an oauth2 host to DevOps for customizing and use a
  # fix/hardcoded redirect path(prefixed with the oauth2 host), 
  # which is "sso/callback", to serve the oidc redirect URI callback,
  # instead of exposing oauth2 redirect URI option to the DevOps explicitly.
  OAuth2Host: http://localhost
  redirectURIs:
  - http://localhost:8080/sso/callback
  allowedAuthTypes:
  - authorization_code
  - implicit
  - client_credentials
  - password_credentials
